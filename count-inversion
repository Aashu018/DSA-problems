

//User function Template for Java

class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        // Your Code Here
        long l = 0;
        long r = N-1;
        long ans = mergeSortAndCount( arr,l,r);
       return ans;
       // we use merger sort
       
       
    }  
    

    public static long mergeAndCount(long[] arr, long l, long m, long r) {

        // Left subarray
        long[] left = Arrays.copyOfRange(arr, (int) l, (int) (m + 1));

        // Right subarray
        long[] right = Arrays.copyOfRange(arr, (int) (m + 1), (int) (r + 1));

        long i = 0, j = 0, k = l, swaps = 0;

        while (i < left.length && j < right.length) {
            if (left[(int) i] <= right[(int) j])
                arr[(int) k++] = left[(int) i++];
            else {
                arr[(int) k++] = right[(int) j++];
                swaps += (m + 1) - (l + i);
            }
        }
        while (i < left.length)
            arr[(int) k++] = left[(int) i++];
        while (j < right.length)
            arr[(int) k++] = right[(int) j++];
        return swaps;
    }

    // Merge sort function
    public static long mergeSortAndCount(long[] arr, long l, long r) {

        // Keeps track of the inversion count at a
        // particular node of the recursion tree
        long count = 0;

        if (l < r) {
            long m = (l + r) / 2;

            // Total inversion count = left subarray count
            // + right subarray count + merge count

            // Left subarray count
            count += mergeSortAndCount(arr, l, m);

            // Right subarray count
            count += mergeSortAndCount(arr, m + 1, r);

            // Merge count
            count += mergeAndCount(arr, l, m, r);
        }

        return count;
    }

}
