

class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
        // Your code here
        Stack<Integer> st = new Stack<>();
        int[] left = new int[n];
        int maxl = arr[0];
      
        int[] right = new int[n];
        for(int i=0;i<n;i++){
            maxl = Math.max(arr[i],maxl);
            left[i] = maxl;
            //System.out.print(left[i] + " ");
        }
       // System.out.println();
        
        maxl = arr[n-1];
        for(int i=n-1;i>=0;i--){
            maxl = Math.max(arr[i],maxl);
            right[i] = maxl;
             //System.out.print(right[i] + " ");
        }
        // System.out.println();
        int[] ans = new int[n];
        long sum = 0;
        for(int i=0;i<n;i++){
            int water = Math.min(right[i],left[i]) - arr[i];
            //System.out.print(water + " ");
            if(water>=0)
            sum += water;
        }
       return sum;
    } 
}
