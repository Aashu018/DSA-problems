package LinkList;
//Implementaion of singly linklist data structure in java
 //import java.util.*;

public class createLL {
 
  private Node head;
  private Node tail;
  private int size;

  public createLL(){
      this.size = 0;
  }

  //////////////////// node class
    private  class Node {
      private int val;
      private Node next;

      public Node(int val){
        this.val = val;
      }
      public Node(int val,Node next){
        this.val = val;
        this.next = next;
      }
    }
    ////////////////////////node class ends

////////////////////////////
    public void insertFirst(int val){
      Node node = new Node(val);
      node.next = head;
      head = node;

      if(tail == null){
        tail = head;
      }
      size += 1;
    }
///////////////////////
    public void addLast(int val) {
      // Write your code here
      Node temp = new Node(val);
      //>temp.val = val;
      temp.next = null;

      if (size==0){
        head = tail = temp;
      }else{
        tail.next = temp;
        tail = temp;
      }
      size++;
     
    }
///////////////////////////////////
   public void display(){
    Node node = head;
    while(node != null){
      System.out.print(node.val + "-> ");
      node = node.next;
    }
    System.out.println("END");

  }
  ////////////////////////////////////////
  public void addidx(int val,int idx){
    if(idx==0){
      insertFirst(val);
      return;
    }
    if(idx==size){
      addLast(val);
    }
    Node temp = head;
    for(int i=1;i<idx;i++){
      temp = temp.next;
    }
    Node node = new Node(val, temp.next);
     temp.next = node;

     size++;
  }
  //////////////////////////////////
  public int deleteFirst() {
    int val = head.val;
    head = head.next;
    if(head==null){
      tail = null;
    }
    size--;
    return val;
  }
  ////////////////////////////////
  public int deleteLast() {
   if(size <=1){
    return deleteFirst();
   }
   Node secondlast = get(size-2);
   int val = tail.val;
   tail = secondlast;
   tail.next = null;
    size--;
    return val;
  }
  ////////////////////////////////////
  public Node get(int idx){
    Node node = head;
    for(int i=0;i<idx;i++){
      node = node.next;
    }
    return node;
  }
  ////////////////////////
  public int delete(int idx) {
    
    if(idx == 0){
      deleteFirst();
    }
    if(idx == size){
      deleteLast();
    }
    Node del = get(idx-1);
    int val = del.next.val;
    del.next = del.next.next;
    size--;
    return val;
  }
  /////////////////////////////
 public Node find(int val){
  Node node = head;
  while(node != null){
    if(node.val == val){
      return node;
    }
    node = node.next;
  }
  return null;
 }

  }

 

